How to compile?
  I have two files dnsdetect.py and dnsinject.py written in python 2.7
  We can directly run these files with the required options. Scapy needs
  to be installed in order to run these programs

OS version : Ubuntu 16 LTS
Language : Python 2.7 with Scapy 2.3.2

*************************************DNSINJECT*****************************
Working examples

1.	On the attacker VM, run dnsinject and an attacker server as follows
	In terminal 1,
		python dnsinject.py
	In terminal 2,
		python -m SimpleHTTPServer 80

	On victim VM, flush dnscache and in the browser go to a website
		example.foo.com

	The result is that you should be directed to the attacker website
	running on attacker's VM.

2.  Similiary on attacker's VM, we can run dnsinject with other options
	python dnsinject.py -h a.txt. This targets a specific set of hosts
	and redirects them to a specific address. We can choose also choose
	the interface that we want run on, for example, python dnsinject -i en0.
	Also, can filter our traffic to be injected using 
	python dnsinject 'udp port 53'

	In all the above cases, you should be redirected to the attacker's
	website.

Design:
	DNS Inject is done using the sniff() function in scapy which sniffs for packets
	based on a filter and an interface and redirects to the callback function that
	we register. This callback function creates a DNS response query bby reversing
	the src and dest IPs and ports along with creating answer record sections which
	has the IP address that we want the victim to redirect to.

***********************************DNSDETECT*********************************
Working examples
1.	On the attacker VM, run dnsinject and an attacker server as follows
	In terminal 1,
		python dnsinject.py
	In terminal 2,
		python -m SimpleHTTPServer 80
	In terminal 3,
		python dnsdetect.py

	On victim VM, flush dnscache and in the browser go to a website
		piazza.com

	The output in terminal 3 looks like this in this case

	20171210-05:20:01.962775  DNS poisoning attempt
	TXID 4E68  Request piazza.com.
	Answer1  ['172.24.17.229']
	Answer2  ['54.236.180.48', '52.45.105.168', '54.172.146.126', '34.230.151.219']

	Similar to the case of DNSINJECT, we can provide options to dnsdetect to filter
	based on interface and bpf filter.

	In addition, we can use a pcap file to test dnsdetect. The output of the pcap file
	zipped along with the submission has the following output.

	root@osboxes:/home/osboxes/CS/sem1/NS/ass4# python dnsdetect.py -r a.pcap
	20171210-03:27:46.149878  DNS poisoning attempt
	TXID 2714  Request imgcdn.ptvcdn.net.
	Answer1  ['172.24.17.229']
	Answer2  ['111.111.111.111']



	20171210-03:27:49.703847  DNS poisoning attempt
	TXID E787  Request www.facebook.com.
	Answer1  ['172.24.17.229']
	Answer2  ['31.13.71.36']

Design:
	dnsdetect stores the previous DNS responsed in a queue.
	When a new response arrives, if there is an existing packet
	which matches with the current packet's DNS TXN ID we flag it as DNS poisoning. 
	To decrease the amount of false    positives, the following has been done.

False positives:
	The src IP, MAC, TTL are used to detect false positives. Also, if there is 
	match in IPs between two packets with same TXN ID, we flags them as false positives
	and don't report DNS poisoning. This way if there are two different users having same TXN ID 
	queries for the same or different question, we don't flag their respective responses as 
	false positive

*********************************************REFERENCES***********************************************************
https://thepacketgeek.com/scapy-p-09-scapy-and-dns/
https://docs.python.org/2/howto/argparse.html
https://stackoverflow.com/a/166589
https://scapy.readthedocs.io/en/latest/
